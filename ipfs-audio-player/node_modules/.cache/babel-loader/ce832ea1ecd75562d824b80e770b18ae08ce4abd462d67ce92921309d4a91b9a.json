{"ast":null,"code":"var _jsxFileName = \"/Users/om/Desktop/OM/OM7/ipfs-audio-player/src/FileUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { create } from 'ipfs-http-client';\n\n// Connect to an IPFS node\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ipfs = create({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\nfunction FileUpload() {\n  _s();\n  const [fileUrl, setFileUrl] = useState('');\n  const onFileChange = async e => {\n    const file = e.target.files[0];\n    try {\n      const added = await ipfs.add(file);\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      setFileUrl(url);\n      console.log('File URL:', url);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: onFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), fileUrl && /*#__PURE__*/_jsxDEV(\"audio\", {\n      controls: true,\n      src: fileUrl,\n      children: \"Your browser does not support the audio element.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(FileUpload, \"wVAs1uu2398xrGl4+IfXWMCiyXU=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","create","jsxDEV","_jsxDEV","ipfs","host","port","protocol","FileUpload","_s","fileUrl","setFileUrl","onFileChange","e","file","target","files","added","add","url","path","console","log","error","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","controls","src","_c","$RefreshReg$"],"sources":["/Users/om/Desktop/OM/OM7/ipfs-audio-player/src/FileUpload.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { create } from 'ipfs-http-client';\n\n// Connect to an IPFS node\nconst ipfs = create({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n\nfunction FileUpload() {\n  const [fileUrl, setFileUrl] = useState('');\n\n  const onFileChange = async (e) => {\n    const file = e.target.files[0];\n    try {\n      const added = await ipfs.add(file);\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      setFileUrl(url);\n      console.log('File URL:', url);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n    }\n  };\n\n  return (\n    <div>\n      <input type=\"file\" onChange={onFileChange} />\n      {fileUrl && <audio controls src={fileUrl}>Your browser does not support the audio element.</audio>}\n    </div>\n  );\n}\n\nexport default FileUpload;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,kBAAkB;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,IAAI,GAAGH,MAAM,CAAC;EAAEI,IAAI,EAAE,gBAAgB;EAAEC,IAAI,EAAE,IAAI;EAAEC,QAAQ,EAAE;AAAQ,CAAC,CAAC;AAE9E,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMY,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChC,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAI;MACF,MAAMC,KAAK,GAAG,MAAMb,IAAI,CAACc,GAAG,CAACJ,IAAI,CAAC;MAClC,MAAMK,GAAG,GAAI,+BAA8BF,KAAK,CAACG,IAAK,EAAC;MACvDT,UAAU,CAACQ,GAAG,CAAC;MACfE,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEH,GAAG,CAAC;IAC/B,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,oBACEpB,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAOsB,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEd;IAAa;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC5CpB,OAAO,iBAAIP,OAAA;MAAO4B,QAAQ;MAACC,GAAG,EAAEtB,OAAQ;MAAAc,QAAA,EAAC;IAAgD;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/F,CAAC;AAEV;AAACrB,EAAA,CArBQD,UAAU;AAAAyB,EAAA,GAAVzB,UAAU;AAuBnB,eAAeA,UAAU;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}